using System.Text.Json.Serialization;
using FastEndpoints;
using Microsoft.AspNetCore.Http;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using R.FastEndpoints.Generators;

namespace R.FastEndpoints.UnitTests.Generators;

public class ImplicitErrorSendingGeneratorTests(ITestOutputHelper output)
{
    private const string InputSource = """
                                       namespace TestAssembly;
                                       using FastEndpoints;
                                       using System;
                                       using System.Threading;
                                       using System.Threading.Tasks;

                                       public class EndpointA : EndpointWithoutRequest {
                                           public override void Configure() { Get("/endpoint-a"); }
                                           public override Task HandleAsync(CancellationToken ct) => Task.CompletedTask;
                                       }
                                       
                                       public class EndpointB : EndpointWithoutRequest {
                                           public override void Configure() { Get("/endpoint-b"); }
                                           public override async Task HandleAsync(CancellationToken ct) {
                                               AddError("Weee");
                                               await SendErrorsAsync();
                                           }
                                       }
                                       
                                       public class EndpointC : Endpoint<object, object> {
                                           public override void Configure() { Get("/endpoint-bc"); }
                                           public override async Task HandleAsync(object req, CancellationToken ct) {
                                               AddError("Weee");
                                               await this.SendyErroryAsync();
                                           }
                                       }
                                       
                                       public class EndpointD : EndpointWithoutRequest<object> {
                                           public override void Configure() { Get("/endpoint-d"); }
                                           public override async Task HandleAsync(CancellationToken ct) {
                                               AddError("Weee");
                                               await this.SendyErroryAsyncTooDeep();
                                           }
                                       }
                                       
                                       public static class EndpointExts {
                                           public static async Task SendyErroryAsync(this IEndpoint endpoint) {
                                               await endpoint.HttpContext.Response.SendErrorsAsync(endpoint.ValidationFailures);
                                           }
                                           
                                           public static async Task SendyErroryAsyncTooDeep(this IEndpoint endpoint) {
                                               await endpoint.SendyErroryAsync();
                                           }
                                       }
                                       """;

    private const string ExpectedGeneratedClassText = """
                                                      // <auto-generated/>
                                                      
                                                      namespace TestAssembly;
                                                      
                                                      using System;
                                                      using System.Collections.Frozen;
                                                      
                                                      public static class ImplicitErrorSenders
                                                      {
                                                          public static readonly FrozenSet<Type> Endpoints =
                                                              FrozenSet.ToFrozenSet([
                                                                  typeof(global::TestAssembly.EndpointB),
                                                                  typeof(global::TestAssembly.EndpointC),
                                                              ]);
                                                      }
                                                      """;

    [Fact]
    public void Generation_With2SendingEndpoints_OutputsTypes()
    {
        var generator = new ImplicitErrorSendingGenerator();
        var driver = CSharpGeneratorDriver.Create(generator);

        var compilation = GeneratorHelpers.GetCompilationForFeSource(InputSource);
        var runResult = driver.RunGenerators(compilation, TestContext.Current.CancellationToken).GetRunResult();

        Assert.Empty(runResult.Diagnostics);
        Assert.Null(runResult.Results[0].Exception);
        Assert.Null(runResult.Results[0].Exception?.InnerException);
        Assert.Single(runResult.GeneratedTrees);
        var generatedText = runResult.GeneratedTrees[0].ToString();
        
        output.WriteLine(generatedText);

        Assert.Equal(ExpectedGeneratedClassText, generatedText,
            ignoreLineEndingDifferences: true);
    }
}